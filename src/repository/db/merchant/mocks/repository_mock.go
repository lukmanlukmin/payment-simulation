// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	db "payment-simulation/model/db"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// CreditBalance mocks base method.
func (m *MockIRepository) CreditBalance(ctx context.Context, id int64, amount decimal.Decimal, expectedVersion int64) (decimal.Decimal, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreditBalance", ctx, id, amount, expectedVersion)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreditBalance indicates an expected call of CreditBalance.
func (mr *MockIRepositoryMockRecorder) CreditBalance(ctx, id, amount, expectedVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreditBalance", reflect.TypeOf((*MockIRepository)(nil).CreditBalance), ctx, id, amount, expectedVersion)
}

// DeductBalance mocks base method.
func (m *MockIRepository) DeductBalance(ctx context.Context, id int64, amount decimal.Decimal, expectedVersion int64) (decimal.Decimal, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeductBalance", ctx, id, amount, expectedVersion)
	ret0, _ := ret[0].(decimal.Decimal)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DeductBalance indicates an expected call of DeductBalance.
func (mr *MockIRepositoryMockRecorder) DeductBalance(ctx, id, amount, expectedVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeductBalance", reflect.TypeOf((*MockIRepository)(nil).DeductBalance), ctx, id, amount, expectedVersion)
}

// GetByID mocks base method.
func (m *MockIRepository) GetByID(ctx context.Context, id int64) (*db.Merchant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*db.Merchant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIRepository)(nil).GetByID), ctx, id)
}
