// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	httppayload "payment-simulation/model/http_payload"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// ProcessTransaction mocks base method.
func (m *MockIService) ProcessTransaction(ctx context.Context, transactionID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessTransaction", ctx, transactionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessTransaction indicates an expected call of ProcessTransaction.
func (mr *MockIServiceMockRecorder) ProcessTransaction(ctx, transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessTransaction", reflect.TypeOf((*MockIService)(nil).ProcessTransaction), ctx, transactionID)
}

// SubmitTransfer mocks base method.
func (m *MockIService) SubmitTransfer(ctx context.Context, req httppayload.TransferRequest) (*httppayload.TransferResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitTransfer", ctx, req)
	ret0, _ := ret[0].(*httppayload.TransferResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitTransfer indicates an expected call of SubmitTransfer.
func (mr *MockIServiceMockRecorder) SubmitTransfer(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitTransfer", reflect.TypeOf((*MockIService)(nil).SubmitTransfer), ctx, req)
}
